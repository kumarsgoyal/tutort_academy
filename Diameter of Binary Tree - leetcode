/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null)
            return 0;
        
        int[] result = new int[1];
        diameterOfBinaryTreeUtil(root, result);
        return result[0] - 1;
    }

    private int diameterOfBinaryTreeUtil(TreeNode root, int[] max) {
        if(root == null)
            return 0;
        
        int left = diameterOfBinaryTreeUtil(root.left, max);
        int right = diameterOfBinaryTreeUtil(root.right, max);
        max[0] = Math.max((1 + left + right), max[0]);
        return 1 + Math.max(left, right);
    }
}
